#+TITLE:   Configuraci√≥n de GNU Emacs usando Doom
#+DATE:    enero 21, 2021
#+STARTUP: inlineimages nofold

#+begin_example
                                    üïá
                 Actiones nostras tibi com√≠timus, D√≥mine,
                  ut ad maiorem gloriam tuam repleamur.
                                  üïá   üïá
#+end_example

* Tabla de contenidos :TOC_3:noexport:
- [[#pre√°mbulo][Pre√°mbulo]]
- [[#configuraci√≥n-por-defecto-sabor-jorge][Configuraci√≥n por defecto, sabor Jorge]]
- [[#aspecto-visual-de-gnu-emacs][Aspecto visual de GNU Emacs]]
  - [[#tipograf√≠a][tipograf√≠a]]
  - [[#cambia-comportamiento-de-tab][cambia comportamiento de TAB]]
- [[#org][Org]]
  - [[#configuraci√≥n-b√°sica][configuraci√≥n b√°sica]]
  - [[#plantillas][plantillas]]
- [[#ispell][ispell]]
- [[#undo-y-redo][undo y redo]]
- [[#cierre-de-buffers][Cierre de buffers]]
- [[#iedit][iedit]]
- [[#yasnippets][yasnippets]]
- [[#golang][Golang]]
- [[#flutter-y-dart][Flutter y Dart]]
- [[#formateadores-de-c√≥digo][formateadores de c√≥digo]]
- [[#detecci√≥n-de-sangrado][Detecci√≥n de sangrado]]
  - [[#apaga-auto-sangrado-en-web-mode][Apaga auto-sangrado en web-mode]]
- [[#correo-electr√≥nico][correo electr√≥nico]]
- [[#tramp][tramp]]
- [[#configuraci√≥n-de-depuraci√≥n-con-dap-mode][configuraci√≥n de depuraci√≥n con dap-mode]]
- [[#ajustes-para-lsp-mode][Ajustes para lsp-mode]]
  - [[#configuraci√≥n-de-lsp-tailwind][configuraci√≥n de lsp-tailwind]]
- [[#svelte-mode][svelte-mode]]
- [[#typescript-mode][typescript-mode]]
- [[#docker][Docker]]
  - [[#dockerfile][Dockerfile]]
- [[#graphql][GraphQL]]
- [[#configuraci√≥n-de-vertico][Configuraci√≥n de vertico]]

* Pre√°mbulo
Datos personales y opciones de Emacs lisp.
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

(setq user-full-name "Jorge Araya Navarro"
      user-mail-address "jorge@esavara.cr")
#+end_src
* Configuraci√≥n por defecto, sabor Jorge
Hay comportamientos en Emacs que me gustar√≠a que fueran usados en Doom, y que se pueda activar como una bandera en =:config default=, los defino aqu√≠.
#+begin_src emacs-lisp
;; cambia ubicacion de snippets para YaSnippet
(setf +snippets-dir (expand-file-name "plantillas" doom-private-dir))
#+end_src
* Aspecto visual de GNU Emacs
#+begin_src emacs-lisp
(setq doom-theme 'doom-gruvbox)
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(after! doom-modeline
  (setq doom-modeline-persp-name t)
  (setq doom-modeline-buffer-file-name-style 'truncate-except-project))
(after! uniquify
  ;; hace unicos los nombres de buffers
  (setq uniquify-buffer-name-style 'reverse)
  (setq uniquify-separator " ‚Ä¢ ")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*"))

(setq display-line-numbers-type t)

(setq fancy-splash-image (expand-file-name "dashboard/JHS.png" doom-private-dir))
;; TODO: cambiar arte ASCII

(setq all-the-icons-scale-factor 0.8)

(custom-set-faces!
  '(aw-leading-char-face
    :foreground "white" :background "red"
    :weight bold :height 1.2 :box (:line-width 10 :color "red")))

;; cambia el tama√±o del primer marco al ancho y alto de la pantalla
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; ajusta el alto del modeline de doom-modeline
(setq-default doom-modeline-height 35)
;; ajusta el ancho de la barra
(setq-default doom-modeline-bar-width 8)

(when IS-LINUX
  (setq-default highlight-indent-guides-method 'bitmap)
  (setq-default highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-dots))
#+end_src
** tipograf√≠a
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka Nerd Font Mono" :size 16)
      doom-big-font (font-spec :family "Iosevka Nerd Font Mono" :size 24 :weight 'normal)
      doom-variable-pitch-font (font-spec :family "Iosevka Aile" :size 16)
      doom-serif-font (font-spec :family "Iosevka Etoile" :size 16))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src
** cambia comportamiento de TAB
No estoy interesado en insertar un tabulador al presionar TAB.
#+begin_src emacs-lisp
(setq tab-always-indent t)
#+end_src
* Org
** configuraci√≥n b√°sica
#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-agenda-files (expand-file-name ".agendas" doom-private-dir))
(setq org-refile-targets `((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9)
                           (org-default-notes-file :maxlevel . 9)
                           (,(expand-file-name "quizas.org" org-directory) :maxlevel . 9)))
#+end_src
** plantillas
#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence "POR-HACER(p)" "SIGNT(s)" "|" "TERMINADO(t)")
          (sequence "ESPERA(e@/!)" "RETENER(r@/!)" "|" "CANCELADO(c@/!)")))
  (setq org-todo-keyword-faces
        '(("POR-HACER" :foreground "red" :weight bold)
          ("SIGNT" :foreground "blue" :weight bold)
          ("TERMINADO" :foreground "forest green" :weight bold)
          ("ESPERA" :foreground "orange" :weight bold)
          ("RETENER" :foreground "magenta" :weight bold)
          ("CANCELADO" :foreground "forest green" :weight bold)))
  (setq org-agenda-custom-commands
        '(("a" "Agenda"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tareas de alta prioridad por terminar:")))
            (agenda ""
                    ((org-agenda-span 'day)
                     (org-agenda-overriding-header "Hoy:")
                     (org-agenda-show-all-dates nil)))
            (agenda ""
                    ((org-agenda-span 'week)
                     (org-agenda-start-day "+1d") ;; A partir de ma√±ana
                     (org-agenda-overriding-header "Semana:")
                     (org-agenda-show-all-dates nil)))
            (agenda ""
                    ((org-agenda-span 'month)
                     ;; A partir de la siguiente semana
                     (org-agenda-start-day "+1w")
                     (org-agenda-overriding-header "Mes:")
                     (org-agenda-show-all-dates nil)))
            (alltodo ""
                     ((org-agenda-skip-function
                       '(and
                         (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "Todas las tareas de prioridad normal:"))))))))

(after! org-capture
  (setq org-plantillas-directory (expand-file-name "org-plantillas" doom-private-dir))
  (setq org-default-notes-file (expand-file-name "notas.org" org-directory))
  (setq org-capture-templates `(("T" "Anotacion t√©cnica" entry (file "apuntes tecnicos.org")
                                 (file ,(expand-file-name "anotacion tecnica.orgcaptmpl" org-plantillas-directory))
                                 :kill-buffer t :clock-in t :clock-resume t)))
  (add-to-list 'org-capture-templates `("t" "Tarea por hacer" entry (file "cosas por hacer.org")
                                        (file ,(expand-file-name "tareas por hacer.orgcaptmpl" org-plantillas-directory))
                                        :kill-buffer t :clock-in t :clock-resume t) :append)
  (add-to-list 'org-capture-templates `("c" "Agregar al calendario" entry (file "agenda.org")
                                        (file ,(expand-file-name "tareas por hacer.orgcaptmpl" org-plantillas-directory))
                                        :kill-buffer t :clock-in t :clock-resume t) :append)
  (add-to-list 'org-capture-templates `("n" "Notas" entry (file+headline org-default-notes-file "Reorganizar")
                                        (file ,(expand-file-name "notas.orgcaptmpl" org-plantillas-directory))
                                        :kill-buffer t :clock-in t :clock-resume t) :append)
  (add-to-list 'org-capture-templates `("f" "Fechas o eventos" entry (file+headline "cosas por hacer.org" "Fechas")
                                        (file ,(expand-file-name "fecha o evento.orgcaptmpl" org-plantillas-directory))
                                        :kill-buffer t :clock-in t :clock-resume t) :append)
  (add-to-list 'org-capture-templates `("r" "Receta de cocina" entry (file "recetas.org")
                                        (file ,(expand-file-name "recetas.orgcaptmpl" org-plantillas-directory))
                                        :kill-buffer t :clock-in t :clock-resume t) :append)
  (add-to-list 'org-capture-templates `("P" "Protocol" entry (file+headline org-default-notes-file "Reorganizar")
                                        (file ,(expand-file-name "protocol.orgcaptmpl" org-plantillas-directory))
                                        :kill-buffer t :clock-in t :clock-resume t) :append)
  (add-to-list 'org-capture-templates `("l" "Protocol Link" entry (file+headline org-default-notes-file "Reorganizar")
                                        (file ,(expand-file-name "protocol.orgcaptmpl" org-plantillas-directory))
                                        :kill-buffer t :clock-in t :clock-resume t) :append)
  ;; Ajuste para LaTeX
  (add-to-list 'org-latex-packages-alist '("" "gchords" t)))
#+end_src
* ispell
Con base al blog post [[https://200ok.ch/posts/2020-08-22_setting_up_spell_checking_with_multiple_dictionaries.html][Setting up spell checking with multiple dictionaries in Emacs]] activamos varios idiomas a la vez.
#+begin_src emacs-lisp
(after! ispell
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "en_US")
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "es_CR,en_US")
  (setq ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "es_CR"))))
  (setq ispell-personal-dictionary "~/.hunspell_personal")
  (unless (file-exists-p ispell-personal-dictionary)
    (write-region "" nil ispell-personal-dictionary nil 0))
  (when (boundp 'ispell-hunspell-dictionary-alist)
      (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)))
#+end_src
* undo y redo
cambia atajos para llamar a undo y redo
#+begin_src emacs-lisp
(map! "C-z" #'undo)
(map! "C-S-z" #'undo-fu-only-redo)
#+end_src
* Cierre de buffers
Cambia atajo para matar el buffer actual
#+begin_src emacs-lisp
(unbind-key "C-x k" global-map)
(map! "C-x k" #'kill-this-buffer)
#+end_src
* iedit
Realiza ajustes peque√±os para iedit-mode
#+begin_src emacs-lisp
(map! "C-M-;" #'iedit-mode)
(map! :map iedit-mode-keymap "RET" #'iedit--quit)
#+end_src
* yasnippets
Configura yasnippet y modifica todos los backends de company-mode para incluirlo en los resultados
#+begin_src emacs-lisp
(when (and (featurep! :completion company)
           (featurep! :editor snippets)
           (featurep! :tools lsp))

  (defun shackra-use-company-capf-with-yasnippet ()
    (setq company-backends '((company-capf company-yasnippet))))

  (add-hook! 'company-mode-hook #'shackra-use-company-capf-with-yasnippet))

(after! yasnippet
  (add-to-list 'yas-snippet-dirs (expand-file-name "plantillas" doom-private-dir) nil))
#+end_src
* Golang
Ajustes menores para Golang
#+begin_src emacs-lisp
(after! go-mode
  (setq-default gofmt-command "goimports")
  (require 'dap-go))
#+end_src
* Flutter y Dart
ajustes menores para estos modos mayores
#+begin_src emacs-lisp
(after! dart-mode
  (setq-default lsp-dart-sdk-dir nil)
  (setq-default flutter-sdk-path nil))
#+end_src
* formateadores de c√≥digo
Define mis propios reformateadores de c√≥digo fuente usando [[https://github.com/raxod502/apheleia][apheleia]].
#+begin_src emacs-lisp
(after! apheleia
  (reformat-add-formatter! '(rustywind . ("rustywind" "--stdin")))
  (reformat-add-formatter! '(eslint . (npx "eslint" "--stdin" "--stdin-filename" file "--fix")))
  (add-to-list 'apheleia-mode-alist '(typescript-tsx-mode . (prettier rustywind)))
  (setf (alist-get 'web-mode apheleia-mode-alist) '(prettier rustywind)))
#+end_src
* Detecci√≥n de sangrado
Con =dtrt-indent-mode= Emacs puede detectar autom√°ticamente el nivel de sangrado en archivos de c√≥digo fuente en varios lenguajes de programaci√≥n.
** Apaga auto-sangrado en web-mode
#+begin_src emacs-lisp
(setq-default web-mode-enable-auto-indentation nil)
(setq-default web-mode-markup-indent-offset 2)
(setq-default web-mode-css-indent-offset 2)
(setq-default web-mode-code-indent-offset 2)
#+end_src
* correo electr√≥nico
#+BEGIN_SRC emacs-lisp :tangle no
(after! mu4e
  (setq +mu43-mu4e-mail-path "~/mail")
  (set-email-account! "jorge@esavara.cr"
                      '((mu4e-sent-folder       . "/personal/Sent Mail")
                        (mu4e-drafts-folder     . "/personal/Drafts")
                        (mu4e-trash-folder      . "/personal/Trash")
                        (mu4e-refile-folder     . "/personal/All Mail")
                        (smtpmail-smtp-user     . "jorge@esavara.cr")
                        (mu4e-compose-signature . "---\nJorge"))
                      t)
  (set-email-account! "jaraya@kue-cr.com"
                      '((mu4e-sent-folder       . "/kue/Sent")
                        (mu4e-drafts-folder     . "/kue/Drafts")
                        (mu4e-trash-folder      . "/kue/Trash")
                        (mu4e-refile-folder     . "/kue/All Mail")
                        (smtpmail-smtp-user     . "jaraya@kue-cr.com")
                        (mu4e-compose-signature . "---\nJorge Araya"))
                      nil))
#+END_SRC
* tramp
Ajustes para Tramp (sacados de [[https://tecosaur.github.io/emacs-config/config.html#tramp][Doom Emacs Configuration]])
#+begin_src emacs-lisp
(after! tramp
  (setenv "SHELL" "/bin/bash"))
#+end_src
* configuraci√≥n de depuraci√≥n con dap-mode
#+begin_src emacs-lisp
(after! dap-mode
  ;; configura dap-mode para depurar en Chrome/Brave
  (require 'dap-chrome)
  (dap-chrome-setup))
#+end_src
* Ajustes para lsp-mode
#+begin_src emacs-lisp
;; ignora .log y .next
(after! lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.log\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.next\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]__snapshots?__\\'"))
#+end_src
** configuraci√≥n de lsp-tailwind
#+begin_src emacs-lisp
(after! lsp-tailwindcss
  (setq lsp-tailwindcss-major-modes '(typescript-tsx-mode rjsx-mode web-mode html-mode css-mode svelte-mode)))
#+end_src
* svelte-mode
#+begin_src emacs-lisp
(use-package! svelte-mode)
#+end_src
* typescript-mode
#+begin_src emacs-lisp
(defun turn-off-indent-guides ()
  (highlight-indent-guides-mode -1))

(add-hook! 'typescript-tsx-mode-hook #'turn-off-indent-guides)
(setq-hook! 'typescript-tsx-mode typescript-indent-level 2)
#+end_src
* Docker
** Dockerfile
#+begin_src emacs-lisp
(use-package! dockerfile-mode)
#+end_src
* GraphQL
#+begin_src emacs-lisp
(use-package! request)

(use-package! graphql-mode
  :mode ("\\.gql\\'" "\\.graphql\\'")
  :config (setq-hook! 'graphql-mode-hook tab-width graphql-indent-level))
#+end_src
* Configuraci√≥n de vertico
ajustes para Vertico
#+begin_src emacs-lisp
(after! vertico
  (vertico-multiform-mode)
  (setq vertico-cycle t)
  (setq vertico-multiform-categories
        '((imenu buffer)
          (consult-grep buffer))))
#+end_src
