;; -*- mode: emacs-lisp -*-

;; This file is for templates for use with Tempel
;; (https://github.com/minad/tempel). You can move this file around as
;; you like; you just need to customize the tempel-path variable.
;;
;; Templates are defined on a per-major-mode basis. The name of a mode
;; alone on a line starts templates for that major mode. See the
;; documentation for tempel for more details.
;;
;; Template syntax:
;;
;; "string" Inserts a string literal.
;; p Inserts an unnamed placeholder field.
;; n Inserts a newline.
;; > Indents with indent-according-to-mode.
;; r Inserts the current region. If no region is active, quits the containing template when jumped to.
;; r> Acts like r, but indent region.
;; n> Inserts a newline and indents.
;; & Insert newline unless there is only whitespace between line start and point.
;; % Insert newline unless there is only whitespace between point and line end.
;; o Like % but leaves the point before newline.
;; (s NAME) Inserts a named field.
;; (p PROMPT <NAME> <NOINSERT>) Insert an optionally named field with a prompt. The PROMPT is displayed directly in the buffer as default value. If NOINSERT is non-nil, no field is inserted. Then the minibuffer is used for prompting and the value is bound to NAME.
;; (r PROMPT <NAME> <NOINSERT>) Insert region or act like (p ...).
;; (r> PROMPT <NAME> <NOINSERT>) Act like (r ...), but indent region.
;;
;; (p FORM <NAME> <NOINSERT>) Like p described above, but FORM is evaluated.
;; (FORM ...) Other Lisp forms are evaluated. Named fields are lexically bound.
;; q Quits the containing template when jumped to.


text-mode

(-- "–")
(--- "—")
(shrug "¯\\_(ツ)_/¯")

(box "┌─" (make-string (length str) ?─) "─┐" n
     "│ " (s str)                       " │" n
     "└─" (make-string (length str) ?─) "─┘" n)
(abox "+-" (make-string (length str) ?-) "-+" n
      "| " (s str)                       " |" n
      "+-" (make-string (length str) ?-) "-+" n)
(rot13 (p "plain text" text) n "----" n (rot13 text))
(calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))
(today (format-time-string "%Y-%m-%d"))
(NOW (format-time-string "<%Y-%0m-%0d %a %H:%0M>"))
(yesterday (format-time-string "<%Y-%0m-%0d %a>" (time-subtract nil (* 24 60 60))))
(tomorrow (format-time-string "<%Y-%0m-%0d %a>" (time-add nil (* 24 60 60))))



prog-mode

(fixme (if (or (derived-mode-p 'racket-mode) (derived-mode-p 'emacs-lisp-mode)) ";; " comment-start) "FIXME: ")
(todo (if (or (derived-mode-p 'racket-mode) (derived-mode-p 'emacs-lisp-mode)) ";; " comment-start) "TODO: ")
(bug (if (or (derived-mode-p 'racket-mode) (derived-mode-p 'emacs-lisp-mode)) ";; " comment-start) "BUG: ")
(hack (if (or (derived-mode-p 'racket-mode) (derived-mode-p 'emacs-lisp-mode)) ";; " comment-start) "HACK: ")
(working (if (or (derived-mode-p 'racket-mode) (derived-mode-p 'emacs-lisp-mode)) ";; " comment-start) "WORKING HERE: ")

go-mode

(vr "var " p " " q)

(mp "map[" p "]" q)

(if "if " p " {" n> p n "}" > q)

(el "if " p " {" n> p n "} else {" > n> p n "}" > q)

(elif "if " p " {" n> p n "} else if " > p " {" n> p n "}" > q)

(ifen "if err != nil {" n> q n "}" >)

(ifer "if err != " p " {" n> q n "}" >)

(sel "select {" n> "case " p ":" n> q n "}" >)

(swch "switch " p " {" n> "case " p ":" q n "}" >)

(fr "for " p "{" n> q n "}" >)

(rng "for " p ", " p " := range " p " {" n> q n "}" >)

(fnc "func " p "(" p ") {" n> q n "}" >)

(mn "func main() {" n> q n "}")

(in "func init() {" n> q n "}")

(tst "func Test" p " (t *testing.T) { " n> q n "}")

markdown-mode

(gitcollapse & "## " (p "Heading") n n "<details>" n n
             "<summary>" (p "Sub Heading")  "</summary>" n n
             (r "Insert Link or comments") n n "</details>")
(bolditalics "***" p "***")
(srcblock (call-interactively #'markdown-insert-gfm-code-block))
(src "'" p "'")
(unorderlist & "- " (p "First") n> "- " (p "Second") n> "- " (p "Third"))
(orderlist & "1. " (p "First") n> "2. " (p "Second") n> "3. " (p "Third"))
(insertimage (call-interactively #'markdown-insert-image))
(insertlink (call-interactively #'markdown-insert-link))
(hugotitle & "+++" n "title = " (p "title") n "date = " (format-time-string "%Y-%m-%d") n "tags = [ " (p "tag1, tag2 ") "]" n "draft = false" n "+++")
(h1 & "# " p " #")
(h2 & "## " p " ##")
(h3 & "### " p " ###")
(h4 & "#### " p " ####")
(inserttable (call-interactively #'markdown-insert-table))

latex-mode LaTeX-mode

;; taken from https://github.com/minad/tempel/blob/5b09f612cfd805dba5e90bf06580583cab045499/README.org#template-file-format
(abstract "\\begin{abstract}\n" r> n> "\\end{abstract}")
(align "\\begin{align}\n" r> n> "\\end{align}")
(alignn "\\begin{align*}\n" r> n> "\\end{align*}")
(gather "\\begin{gather}\n" r> n> "\\end{gather}")
(gatherr "\\begin{gather*}\n" r> n> "\\end{gather*}")
(appendix "\\begin{appendix}\n" r> n> "\\end{appendix}")
(begin "\\begin{" (s env) "}" r> n> "\\end{" (s env) "}")
(center "\\begin{center}\n" r> n> "\\end{center}")
(displaymath "\\begin{displaymath}\n" r> n> "\\end{displaymath}")
(document "\\begin{document}\n" r> n> "\\end{document}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(equation "\\begin{equation}" r> n> "\\end{equation}")
(flushleft "\\begin{flushleft}" r> n> "\\end{flushleft}")
(flushright "\\begin{flushright}" r> n> "\\end{flushright}")
(frac "\\frac{" p "}{" q "}")
(fussypar "\\begin{fussypar}" r> n> "\\end{fussypar}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")
(letter "\\begin{letter}\n" r> n> "\\end{letter}")
(math "\\begin{math}\n" r> n> "\\end{math}")
(minipage "\\begin{minipage}[t]{0.5\linewidth}\n" r> n> "\\end{minipage}")
(quotation "\\begin{quotation}\n" r> n> "\\end{quotation}")
(quote "\\begin{quote}\n" r> n> "\\end{quote}")
(sloppypar "\\begin{sloppypar}\n" r> n> "\\end{sloppypar}")
(theindex "\\begin{theindex}\n" r> n> "\\end{theindex}")
(trivlist "\\begin{trivlist}\n" r> n> "\\end{trivlist}")
(verbatim "\\begin{verbatim}\n" r> n> "\\end{verbatim}")
(verbatimm "\\begin{verbatim*}\n" r> n> "\\end{verbatim*}")

sh-base-mode

(if "if [ " p " ]" n "  then " p n "fi" q)

(ife "if [ " p " ]" n "  then " p n "else" p n "fi" q)

(cs "case " p " in" n> p " )" n> p n> ";;" n> q n "esac")

(fr "for " p " in " p n "do" n> q n "done")

;; See the README of Tempel for more template ideas
